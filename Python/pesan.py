from Crypto.Util.number import inverse

# Nilai yang diketahui
p = 12438054216552564156136803777423237469649013881803337956988045286094899265193250681201633826244271912525003197958506970515402801070982397453222460287887703
q = 12466811651028042009804607705315977478396444095742322154200324434606696585965912881490971382923375103482277651617233099633865657982526934873983146656834111
n = 155062879223035971913942097697096369966556855150811931318579944035707272980683794011120016496977095746609002976078594903578068877698239025719096133254430617113885045990317222855951449489919476771797028214155695391845892213789146358183653029285005288736496120143167384921193016069257772996801151081161467837033
e = 65537
c = 27986433707088350817308702836036381187895350904510039911701947011601588141498300965220291464588478433745422341810730517747890677445017358455081848189131760884982748078692186984008396573193689270678836552273981322916840540275603695281061428849668762292400085424030682574846793423975563621054757509337667418119

# Menghitung nilai d (private key)
phi = (p - 1) * (q - 1)
d = inverse(e, phi)

# Mendekripsi pesan c
m = pow(c, d, n)

# Mengonversi pesan kembali ke format teks
decrypted_message = m.to_bytes((m.bit_length() + 7) // 8, 'big').decode()

# Mencetak pesan yang telah didekripsi
print("Pesan yang telah didekripsi:", decrypted_message)
